/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Metrics as PrismaMetrics,
  Server as PrismaServer,
} from "@prisma/client";

export class MetricsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MetricsCountArgs, "select">): Promise<number> {
    return this.prisma.metrics.count(args);
  }

  async metricsItems(
    args: Prisma.MetricsFindManyArgs
  ): Promise<PrismaMetrics[]> {
    return this.prisma.metrics.findMany(args);
  }
  async metrics(
    args: Prisma.MetricsFindUniqueArgs
  ): Promise<PrismaMetrics | null> {
    return this.prisma.metrics.findUnique(args);
  }
  async createMetrics(args: Prisma.MetricsCreateArgs): Promise<PrismaMetrics> {
    return this.prisma.metrics.create(args);
  }
  async updateMetrics(args: Prisma.MetricsUpdateArgs): Promise<PrismaMetrics> {
    return this.prisma.metrics.update(args);
  }
  async deleteMetrics(args: Prisma.MetricsDeleteArgs): Promise<PrismaMetrics> {
    return this.prisma.metrics.delete(args);
  }

  async getServer(parentId: string): Promise<PrismaServer | null> {
    return this.prisma.metrics
      .findUnique({
        where: { id: parentId },
      })
      .server();
  }
}
